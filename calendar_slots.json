{
  "nodes": [
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "421f7f9a-66f0-4bf4-9313-86cbe5d1ce0d",
      "name": "Aggregate Events",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        592,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get input data - handle both webhook data and aggregated events\nconst webhookData = $input.first().json;\n\n// MANUALLY SET DATE HERE (YYYY-MM-DD format)\nconst inputDate = $('Webhook calendar_slots_workflow').first().json.body.message.toolCalls[0].function.arguments.date;\n\nconst events = webhookData.data || [];\n\n// Clinic configuration\nconst CLINIC_CONFIG = {\n  workingHours: {\n    monday: { start: 8, end: 16 },\n    tuesday: { start: 8, end: 16 },\n    wednesday: { start: 8, end: 16 },\n    thursday: { start: 8, end: 16 },\n    friday: { start: 8, end: 16 },\n    saturday: null, // Closed\n    sunday: null    // Closed\n  },\n  minSlotDuration: 60, // minutes\n  timezone: 'UTC' // Use UTC for consistency\n};\n\n// Validate input date\nif (!inputDate) {\n  return [{\n    json: {\n      success: false,\n      error: 'Date parameter is required',\n      message: 'Please provide a date in YYYY-MM-DD format'\n    }\n  }];\n}\n\n// Parse the requested date\nconst requestedDate = new Date(inputDate + 'T00:00:00.000Z');\n\nif (isNaN(requestedDate.getTime())) {\n  return [{\n    json: {\n      success: false,\n      error: 'Invalid date format',\n      message: 'Please provide date in YYYY-MM-DD format'\n    }\n  }];\n}\n\nconst dayOfWeek = requestedDate.toLocaleDateString('en-US', { weekday: 'long', timeZone: 'UTC' }).toLowerCase();\n\n// Check if clinic is open on this day\nconst workingHours = CLINIC_CONFIG.workingHours[dayOfWeek];\nif (!workingHours) {\n  return [{\n    json: {\n      success: true,\n      date: inputDate,\n      dayOfWeek: dayOfWeek,\n      message: 'Clinic is closed on this day',\n      slots: []\n    }\n  }];\n}\n\n// Create opening and closing times for the requested date\nconst openingTime = new Date(requestedDate);\nopeningTime.setUTCHours(workingHours.start, 0, 0, 0);\n\nconst closingTime = new Date(requestedDate);\nclosingTime.setUTCHours(workingHours.end, 0, 0, 0);\n\n// Process booked events\nconst bookedSlots = events\n  .filter(event => {\n    return event.start && event.end && \n           (event.start.dateTime || event.start.date) &&\n           (event.end.dateTime || event.end.date);\n  })\n  .map(event => {\n    // Handle both dateTime and date formats\n    const startStr = event.start.dateTime || event.start.date;\n    const endStr = event.end.dateTime || event.end.date;\n    \n    return {\n      start: new Date(startStr),\n      end: new Date(endStr)\n    };\n  })\n  .filter(slot => {\n    // Only include events that overlap with working hours\n    return slot.start < closingTime && slot.end > openingTime &&\n           !isNaN(slot.start.getTime()) && !isNaN(slot.end.getTime());\n  })\n  .sort((a, b) => a.start.getTime() - b.start.getTime());\n\n// Format booked slots for easy reading\nconst formattedSlots = bookedSlots.map(slot => {\n  const startTime = new Date(slot.start);\n  const endTime = new Date(slot.end);\n  const duration = Math.floor((slot.end.getTime() - slot.start.getTime()) / (60 * 1000)); // duration in minutes\n  \n  return {\n    start: slot.start.toISOString(),\n    end: slot.end.toISOString(),\n    startTime: startTime.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false,\n      timeZone: 'UTC'\n    }),\n    endTime: endTime.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false,\n      timeZone: 'UTC'\n    }),\n    duration: duration,\n    displayText: `${startTime.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false,\n      timeZone: 'UTC'\n    })} - ${endTime.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false,\n      timeZone: 'UTC'\n    })} (${duration} min)`\n  };\n});\n\n// Create detailed message with slot information\nlet detailedMessage = '';\nif (formattedSlots.length > 0) {\n  const slotDetails = formattedSlots.map(slot => \n    `${slot.startTime} - ${slot.endTime} (${slot.duration} min)`\n  ).join(', ');\n  detailedMessage = `Found ${formattedSlots.length} booked appointment(s): ${slotDetails}`;\n} else {\n  detailedMessage = 'No appointments booked for this date';\n}\n\nconst result = {\n  success: true,\n  date: inputDate,\n  dayOfWeek: dayOfWeek,\n  clinicHours: {\n    opening: workingHours.start.toString().padStart(2, '0') + ':00',\n    closing: workingHours.end.toString().padStart(2, '0') + ':00'\n  },\n  totalBookedSlots: bookedSlots.length,\n  bookedSlots: formattedSlots.length,\n  slots: formattedSlots,\n  message: detailedMessage\n};\n\nreturn [{ json: result }];"
      },
      "id": "2445ba44-b6c3-43fd-8ec7-a3c1aa11e557",
      "name": "Calculate Free Slots",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        -80
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "test@gmail.com",
          "mode": "list",
          "cachedResultName": "test@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $json.body.message.toolCalls[0].function.arguments.date }}T00:00:00Z",
        "timeMax": "={{ $json.body.message.toolCalls[0].function.arguments.date }}T23:59:59Z",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        160,
        -64
      ],
      "id": "ad1edbd4-91c3-4322-a457-ba959598a0ec",
      "name": "Get many events1",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "QwlUgCsjoG0OIHz8",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "calendar_slots",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -64,
        -64
      ],
      "id": "576196eb-2c2f-457b-ab5c-423f0fede795",
      "name": "Webhook calendar_slots_workflow",
      "webhookId": "78fb4c52-5aa6-4d94-880c-103e02b0df9d"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n    \"results\":[\n        {\n            \"toolCallId\":\"{{ $('Webhook calendar_slots_workflow').item.json.body.message.toolCallList[0].id }}\",\n            \"result\": \"{{ $json.message }}\"\n        }\n    ]\n}\n",
        "options": {}
      },
      "id": "04e14ae4-427d-421f-b9c4-12733a5dc553",
      "name": "Response - Weekend",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        960,
        80
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n    \"results\":[\n        {\n            \"toolCallId\":\"{{ $('Webhook calendar_slots_workflow').item.json.body.message.toolCallList[0].id }}\",\n            \"result\": \"No booked slots for this day\"\n        }\n    ]\n}\n",
        "options": {}
      },
      "id": "b2845be8-b88f-474b-bdec-8f0bb70a35e1",
      "name": "Response - Full Slots Available",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1152,
        112
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n    \"results\":[\n        {\n            \"toolCallId\":\"{{ $('Webhook calendar_slots_workflow').item.json.body.message.toolCallList[0].id }}\",\n            \"result\": \"{{ $json.message }}\"\n        }\n    ]\n}\n",
        "options": {}
      },
      "id": "f568316a-7d77-40c8-b628-a0190e5788f6",
      "name": "Response - Slots Available",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1088,
        -80
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3929a67b-9b2d-4df3-a700-568b59fa659a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "confirmed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        368,
        -64
      ],
      "id": "96464d4f-373c-4d33-8a53-ae0073040ec1",
      "name": "If Slots Exist"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data - extract date directly from the nested path\nconst dateString = $('Webhook calendar_slots_workflow').first().json.body.message.toolCallList[0].function.arguments.date;\n\n// Validate date exists\nif (!dateString) {\n  return [{\n    json: {\n      error: 'Date field is required',\n      isWeekend: false,\n      dayOfWeek: null\n    }\n  }];\n}\n\n// Parse the date\nconst date = new Date(dateString);\n\n// Validate date is valid\nif (isNaN(date.getTime())) {\n  return [{\n    json: {\n      error: 'Invalid date format',\n      isWeekend: false,\n      dayOfWeek: null\n    }\n  }];\n}\n\n// Get day of week (0 = Sunday, 6 = Saturday)\nconst dayOfWeek = date.getDay();\n\n// Check if it's weekend\nconst isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n\n// Get day name\nconst dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst dayName = dayNames[dayOfWeek];\n\n// Return the result with weekend info\nreturn [{\n  json: {\n    date: dateString, // Include the original date\n    isWeekend: isWeekend,\n    dayOfWeek: dayOfWeek,\n    dayName: dayName,\n    message: isWeekend ? `${dayName} is a weekend day` : `${dayName} is a weekday`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        96
      ],
      "id": "658a6b17-2016-4453-92ca-525d1f4e6413",
      "name": "JavaScript To Find Day"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9e8487e4-875e-46b0-96bc-e37cf6841c0d",
              "leftValue": "={{ $json.isWeekend }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        784,
        96
      ],
      "id": "caa6c494-a192-43fb-902b-74dec2e5288d",
      "name": "If Weekend"
    }
  ],
  "connections": {
    "Aggregate Events": {
      "main": [
        [
          {
            "node": "Calculate Free Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Free Slots": {
      "main": [
        [
          {
            "node": "Response - Slots Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many events1": {
      "main": [
        [
          {
            "node": "If Slots Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook calendar_slots_workflow": {
      "main": [
        [
          {
            "node": "Get many events1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Slots Exist": {
      "main": [
        [
          {
            "node": "Aggregate Events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "JavaScript To Find Day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JavaScript To Find Day": {
      "main": [
        [
          {
            "node": "If Weekend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Weekend": {
      "main": [
        [
          {
            "node": "Response - Weekend",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response - Full Slots Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a4abe292dde3b8deba350548e5546febb5e9f65db6cf3af1d200fb2885172aac"
  }
}
